library(tidyverse)
library(dplyr)
library(readr)
NF_2019 <- read_csv("Dropbox/PPGMMC/Dissertação/Dados/NF_2019.csv")
remotes::install_github("ipeaGIT/censobr", ref="dev")
install.packages("devtools")
remotes::install_github("ipeaGIT/censobr", ref="dev")
library(censobr)
data_dictionary(year = 2010, dataset = 'population', showProgress = FALSE)
rm(list = ls())
gc()
library(tidymodels)
library(recipes)
library(dplyr)
library(purrr)
library(doParallel)
library(janitor)
library(stringr)
library(ggplot2)
library(vip)
library(knitr)
library(xgboost)
rm(list = ls(all = TRUE))
setwd("~/Dropbox/PPGMMC/Dissertação/Script")
setwd("~/Dropbox/PPGMMC/Dissertação/Script/Custo_Trans_Licit_Pb")
modelo_random_forest <- readRDS("~/Dropbox/PPGMMC/Dissertação/Script/Custo_Trans_Licit_Pb/modelo_random_forest.rds")
rm(list = ls(all = TRUE))
rm(list = ls())
gc()
# Lendo modelo treinado ---------------------------------------------------
modelo_carregado <- readRDS("modelo_random_forest.rds")
dados <-
readRDS("dados-novo.rds") |>
janitor::clean_names() |>
janitor::remove_empty("rows") |>
janitor::remove_empty("cols")
# Separando dados de treino e teste ---------------------------------------
set.seed(0)
dados_split <- initial_split(dados, prop = 0.8, strata = "custo_tran_norm")
# Dados de treinamento
dados_treinamento <- training(dados_split)
# Dados de teste
dados_teste <- testing(dados_split)
print(modelo_carregado)
modelo_params <- modelo_carregado %>%
extract_fit_parsnip() %>%
.$fit %>%
.$model
print(modelo_params)
# Se desejar visualizar os hiperparâmetros de forma mais detalhada
hyperparameters <- list(
mtry = modelo_params$mtry,
min_n = modelo_params$min.node.size
)
print(hyperparameters)
modelo_fit <- modelo_carregado %>%
extract_fit_parsnip()
# Verificar se o fit foi extraído corretamente
print(modelo_fit)
# Visualizar os hiperparâmetros do modelo carregado
if (!is.null(modelo_fit)) {
modelo_params <- modelo_fit$fit
# Extrair os hiperparâmetros específicos do modelo random forest
hyperparameters <- list(
mtry = modelo_params$mtry,
min_n = modelo_params$min.node.size
)
print(hyperparameters)
} else {
print("Não foi possível extrair os hiperparâmetros do modelo.")
}
print(hyperparameters)
